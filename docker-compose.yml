services:
  api:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BASE_URL=http://localhost:3000
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - VALKEY_HOST=${VALKEY_HOST}
      - VALKEY_PORT=${VALKEY_PORT}
      - VALKEY_PASSWORD=${VALKEY_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - valkey
      - redis

  united-microservice:
    build: .
    ports:
      - "4004:4004"
    environment:
      - NODE_ENV=production
      - PROXY_HOST=${PROXY_HOST}
      - PROXY_PORT=${PROXY_PORT}
      - PROXY_USERNAME=${PROXY_USERNAME}
      - PROXY_PASSWORD=${PROXY_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - ./united-microservice:/app/united-microservice
      - ./arkalis:/app/arkalis
    working_dir: /app
    command: npx tsx united-microservice/united-service.ts
    depends_on:
      - redis

  # Application Redis (separate from valkey)
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Using different port to avoid conflict with valkey
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-}"]
    volumes:
      - redis_data:/data
    restart: unless-stopped

  valkey:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "yourpassword"] # optional
    # For production, use a managed Redis or secure this container!

volumes:
  redis_data: